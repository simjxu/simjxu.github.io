{"expireTime":9007200877953585000,"key":"transformer-remark-markdown-html-ast-d06f49bb6b001f2cf5ba5a3034916cba--","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Reader's note: These instructions are specifically for Mac OSX (I was running Catalina). I'm currently trying to port over everything onto my linux computer, but I am running into compile issues there.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":202,"offset":202}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":202,"offset":202}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since I've decided it was time to actually learn how to write embedded code, I decided the best thing to do was to start with this free STM32 Discovery kit, which I got for free after attending a conference. It's neat because this board is packed to the brim with sensors, and also includes a WiFi and BLE chip. I only which it had a cell module too, but nothing's perfect.","position":{"start":{"line":4,"column":1,"offset":204},"end":{"line":4,"column":374,"offset":577}}}],"position":{"start":{"line":4,"column":1,"offset":204},"end":{"line":4,"column":374,"offset":577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's easy to get started with this board because STM32 provides the STM32CubeMX application, which generates code for you automatically. The first thing I wanted to do was to get the USB port working so that I could write serial logs. This was pretty easy to do by following this setup here: ","position":{"start":{"line":6,"column":1,"offset":579},"end":{"line":6,"column":293,"offset":871}}},{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/watch?v=AYICE0gU-Sg"},"children":[{"type":"text","value":"https://www.youtube.com/watch?v=AYICE0gU-Sg","position":{"start":{"line":6,"column":293,"offset":871},"end":{"line":6,"column":336,"offset":914}}}],"position":{"start":{"line":6,"column":293,"offset":871},"end":{"line":6,"column":336,"offset":914}}},{"type":"text","value":". Of course, there were some minor differences because the board from that video was different from this one. You can see exactly what by opening the .ioc file in my repo ","position":{"start":{"line":6,"column":336,"offset":914},"end":{"line":6,"column":507,"offset":1085}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/simjxu/stm32_discovery"},"children":[{"type":"text","value":"https://github.com/simjxu/stm32_discovery","position":{"start":{"line":6,"column":507,"offset":1085},"end":{"line":6,"column":548,"offset":1126}}}],"position":{"start":{"line":6,"column":507,"offset":1085},"end":{"line":6,"column":548,"offset":1126}}},{"type":"text","value":" (as of commit hash 1798e96db2c7153ad87412712790d49240252aee). ","position":{"start":{"line":6,"column":548,"offset":1126},"end":{"line":6,"column":611,"offset":1189}}}],"position":{"start":{"line":6,"column":1,"offset":579},"end":{"line":6,"column":611,"offset":1189}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"From there, code was generated. I opted to use the VS Code plugin called \"PlatformIO\" to help build and read from terminal. The code generated from CubeMX actually had some compile errors when I tried to follow the tutorial. Turns out, it didn't like that a couple of the functions had a mismatched type in the last argument. It was expecting uint16","position":{"start":{"line":8,"column":1,"offset":1191},"end":{"line":8,"column":350,"offset":1540}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"t, but you can see a uint32","position":{"start":{"line":8,"column":351,"offset":1541},"end":{"line":8,"column":378,"offset":1568}}}],"position":{"start":{"line":8,"column":350,"offset":1540},"end":{"line":8,"column":379,"offset":1569}}},{"type":"text","value":"t.","position":{"start":{"line":8,"column":379,"offset":1569},"end":{"line":8,"column":381,"offset":1571}}}],"position":{"start":{"line":8,"column":1,"offset":1191},"end":{"line":8,"column":381,"offset":1571}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,\n                                    uint8_t *pbuf, uint32_t size);\n\nUSBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr,\n                                          uint8_t *pbuf, uint32_t size);\n"}],"position":{"start":{"line":10,"column":1,"offset":1573},"end":{"line":16,"column":4,"offset":1888}}}],"position":{"start":{"line":10,"column":1,"offset":1573},"end":{"line":16,"column":4,"offset":1888}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I edited to say uint16","position":{"start":{"line":18,"column":1,"offset":1890},"end":{"line":18,"column":23,"offset":1912}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"t, and compilations ended up happening successfully, but for some reason this switched back to uint32","position":{"start":{"line":18,"column":24,"offset":1913},"end":{"line":18,"column":125,"offset":2014}}}],"position":{"start":{"line":18,"column":23,"offset":1912},"end":{"line":18,"column":126,"offset":2015}}},{"type":"text","value":"t, but with no issues compiling after that point... So I'm not sure what's happening here. Nevertheless, I was able to start printing my helloworld over serial. Note that both USB connectors need to be connected in order to read off of that port (see picture).","position":{"start":{"line":18,"column":126,"offset":2015},"end":{"line":18,"column":386,"offset":2275}}}],"position":{"start":{"line":18,"column":1,"offset":1890},"end":{"line":18,"column":386,"offset":2275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Results:\n","position":{"start":{"line":20,"column":1,"offset":2277},"end":{"line":21,"column":1,"offset":2286}}},{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/gh-pages/img/BL475E_usb.jpg","alt":"board_2xusb"},"children":[],"position":{"start":{"line":21,"column":1,"offset":2286},"end":{"line":21,"column":102,"offset":2387}}}],"position":{"start":{"line":20,"column":1,"offset":2277},"end":{"line":21,"column":102,"offset":2387}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a side note, you are also able to compile in C++ code, no problemo. I tried adding in a class, and was able to get it working and printing out (see classtest.h and classtest.cpp).","position":{"start":{"line":23,"column":1,"offset":2389},"end":{"line":23,"column":183,"offset":2571}}}],"position":{"start":{"line":23,"column":1,"offset":2389},"end":{"line":23,"column":183,"offset":2571}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"class FatherProperty {\nprivate:\n    static uint8_t propValue[];        // I need to declare this as static, why?\n    // static means that there is only one copy of propValue, no matter how many times the class is instantiated\n\npublic:\n    void getProperty();\n};\n\nuint8_t FatherProperty::propValue[]=\"asdf\\n\";\nvoid FatherProperty::getProperty() \n{\n    int len = sizeof(this->propValue);\n    CDC_Transmit_FS(this->propValue,len-1);         // subtract 1 so that it does not include the extra character\n}\n"}],"position":{"start":{"line":25,"column":1,"offset":2573},"end":{"line":41,"column":4,"offset":3085}}}],"position":{"start":{"line":25,"column":1,"offset":2573},"end":{"line":41,"column":4,"offset":3085}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":42,"column":1,"offset":3086}}}}