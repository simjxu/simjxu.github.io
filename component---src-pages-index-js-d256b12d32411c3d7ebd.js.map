{"version":3,"sources":["webpack:///./src/utils/typography.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["typography","a","baseFontSize","rhythm","query","__webpack_exports__","_ref","data","console","log","react_default","createElement","layout","className","Object","index_esm","allMarkdownRemark","totalCount","edges","map","_ref3","node","key","id","gatsby_browser_entry","to","fields","slug","frontmatter","title","date","excerpt","__webpack_require__","r","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","props","Consumer","staticQueryData","render","children","Error","propTypes","object","string","isRequired","func","m","module","exports","default","ProdPageRenderer","location","pageResources","_loader__WEBPACK_IMPORTED_MODULE_4__","getResourcesForPathnameSync","pathname","react__WEBPACK_IMPORTED_MODULE_1___default","_page_renderer__WEBPACK_IMPORTED_MODULE_3__","assign","json","prop_types__WEBPACK_IMPORTED_MODULE_2___default","shape","header_ListLink","style","display","marginRight","header","siteTitle","background","marginBottom","margin","maxWidth","padding","listStyle","float","color","textDecoration","layout_Layout","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","paddingTop","_755544856","prop_types_default"],"mappings":"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","file":"component---src-pages-index-js-d256b12d32411c3d7ebd.js","sourcesContent":["import Typography from 'typography'\n\n// This is where you must define the baselin fonts that the\n// website will use\nconst typography = new Typography({ baseFontSize: \"50px\" })\n\nexport default typography\nexport const rhythm = typography.rhythm","import React from 'react'\nimport { Link, graphql } from \"gatsby\"\nimport { css } from \"react-emotion\"\nimport { rhythm } from \"../utils/typography\"\nimport Layout from '../components/layout'\n// import { node } from 'prop-types';\n\nconst IndexPage = ({ data }) => {\n  console.log(data)\n  return (\n    <Layout>\n      <div>\n        <h3\n          className={css`\n            display: inline-block;\n            color: #719010;\n            // border-bottom: 1px solid;\n          `}\n        >\n          A soft nutritiously technical blog \n        </h3>\n\n\n\n        <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n            <Link\n              to={node.fields.slug}\n              className={css`\n                text.decoration:none:\n                color: inherit;\n              `}\n            >\n              <h3\n                className={css`\n                  margin-bottom: ${rhythm(1 / 4)};\n                `}\n              >\n                {node.frontmatter.title}{\" \"}\n                <span\n                  className={css`\n                    color: #bbb;\n                  `}\n                >\n                  - {node.frontmatter.date}\n                </span>\n              </h3>\n            </Link>\n            <p>{node.excerpt}</p>\n            {/* <p>{node.internal.content}</p> */}\n          </div>\n        ))}\n\n          \n          \n        \n      </div>\n    </Layout>\n  )\n}\n\n// This is the GraphQL filter that determines what shows up\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC}\n      filter: { frontmatter: {layout: {eq: \"post\"}}}) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n          internal {\n            content\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    key: location.pathname,\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst ListLink = props => (\n  <li style={{ display: 'inline-block', marginRight: '1rem' }}>\n    <Link to={props.to}>{props.children}</Link>\n  </li>\n)\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: '#2f3143',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      {/* This is where you place the 3 links for Home, About, and Contact in the upper Right */}\n      <header style={{ marginBottom: `0rem` }}>\n        <ul style={{ listStyle: `none`, float: `right` }}>\n          <ListLink to=\"/\">Home</ListLink>\n          <ListLink to=\"/about/\">About</ListLink>\n          <ListLink to=\"/contact/\">Contact</ListLink>\n        </ul>\n      </header>\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport './layout.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n        \n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}