{"expireTime":9007200904828481000,"key":"transformer-remark-markdown-ast-5f6c2735e3ae25e42350798ed13d3b19--","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"After much trial and error, and looking through the mbed example \"mbed-os-example-ble-Thermometer\" (which you can pick up from ide.mbed.com by creating a new project from template), I was able to get the STM32 Discovery to output two services: an LED Service, which allows control over its LED (on/off), and a Sensor Service which reads the onboard temperature sensor and outputs the value onto the service, which can be read with the Lightblue app.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":450,"offset":450},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":450,"offset":450},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The commit hash to check out is: b3a3e2050ad0cde59e4832fbfe94192c8bb75ef3 on the ","position":{"start":{"line":4,"column":1,"offset":452},"end":{"line":4,"column":82,"offset":533},"indent":[]}},{"type":"inlineCode","value":"stm32_discovery_mbed","position":{"start":{"line":4,"column":82,"offset":533},"end":{"line":4,"column":104,"offset":555},"indent":[]}},{"type":"text","value":" project, but some of the highlights:","position":{"start":{"line":4,"column":104,"offset":555},"end":{"line":4,"column":141,"offset":592},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":452},"end":{"line":4,"column":141,"offset":592},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tell the mbed-os event queue to read the sensor every 500ms","position":{"start":{"line":5,"column":4,"offset":596},"end":{"line":5,"column":63,"offset":655},"indent":[]}}],"position":{"start":{"line":5,"column":4,"offset":596},"end":{"line":5,"column":63,"offset":655},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":593},"end":{"line":5,"column":63,"offset":655},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When the BLE service is read, update the temperature through the sensorServicePointer","position":{"start":{"line":6,"column":4,"offset":659},"end":{"line":6,"column":89,"offset":744},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":659},"end":{"line":6,"column":89,"offset":744},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":656},"end":{"line":6,"column":89,"offset":744},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use the template to modify the generic attribute profile in the class: see below","position":{"start":{"line":7,"column":4,"offset":748},"end":{"line":7,"column":84,"offset":828},"indent":[]}}],"position":{"start":{"line":7,"column":4,"offset":748},"end":{"line":7,"column":84,"offset":828},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":745},"end":{"line":7,"column":84,"offset":828},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":593},"end":{"line":7,"column":84,"offset":828},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"class SensorService {\npublic:\n    const static uint16_t SENSOR_SERVICE_UUID              = 0xB000;\n    const static uint16_t SENSOR_STATE_CHARACTERISTIC_UUID = 0xB001;\n\n    // Constructor. Colon means there is an initializer list before running constructor\n    SensorService(BLEDevice &_ble, float initialValueForSensorCharacteristic) :\n        ble(_ble), \n        valueBytes(initialValueForSensorCharacteristic), \n        tempMeasurement(SENSOR_STATE_CHARACTERISTIC_UUID, (TemperatureValueBytes *)valueBytes.getPointer(), GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_NOTIFY)\n    {\n        GattCharacteristic *charTable[] = {&tempMeasurement};\n        GattService         sensorService(SENSOR_SERVICE_UUID, charTable, sizeof(charTable) / sizeof(GattCharacteristic *));\n        ble.addService(sensorService);\n    }\n\n    GattAttribute::Handle_t getValueHandle() const\n    {\n        return tempMeasurement.getValueHandle();\n    }\n\n    void updateTemperature(float temperature) {\n        if (ble.getGapState().connected) {\n            valueBytes.updateTemperature(temperature);\n            ble.gattServer().write(tempMeasurement.getValueHandle(), valueBytes.getPointer(), sizeof(TemperatureValueBytes));\n        }\n    }\n\nprivate:\n    \n    /* Private internal representation for the bytes used to work with the vaulue of the temperature characteristic. \n     * Copied over from project \"mbed-os-example-ble-Thermometer\"\n    */\n    struct TemperatureValueBytes {\n        static const unsigned OFFSET_OF_FLAGS    = 0;\n        static const unsigned OFFSET_OF_VALUE    = OFFSET_OF_FLAGS + sizeof(uint8_t);\n        static const unsigned SIZEOF_VALUE_BYTES = sizeof(uint8_t) + sizeof(float);\n\n        static const unsigned TEMPERATURE_UNITS_FLAG_POS = 0;\n        static const unsigned TIMESTAMP_FLAG_POS         = 1;\n        static const unsigned TEMPERATURE_TYPE_FLAG_POS  = 2;\n\n        static const uint8_t  TEMPERATURE_UNITS_CELSIUS    = 0;\n        static const uint8_t  TEMPERATURE_UNITS_FAHRENHEIT = 1;\n\n        TemperatureValueBytes(float initialTemperature) : bytes() {\n            /* Assumption: temperature values are expressed in celsius */\n            bytes[OFFSET_OF_FLAGS] =  (TEMPERATURE_UNITS_CELSIUS << TEMPERATURE_UNITS_FLAG_POS) |\n                                      (false << TIMESTAMP_FLAG_POS) |\n                                      (false << TEMPERATURE_TYPE_FLAG_POS);\n            updateTemperature(initialTemperature);\n        }\n\n        void updateTemperature(float temp) {\n            uint32_t temp_ieee11073 = quick_ieee11073_from_float(temp);\n            memcpy(&bytes[OFFSET_OF_VALUE], &temp_ieee11073, sizeof(float));\n            memcpy(&bytes[OFFSET_OF_VALUE], &temp, sizeof(float));\n        }\n\n        uint8_t       *getPointer(void) {\n            return bytes;\n        }\n\n        const uint8_t *getPointer(void) const {\n            return bytes;\n        }\n\nprivate:\n        /**\n         * @brief A very quick conversion between a float temperature and 11073-20601 FLOAT-Type.\n         * @param temperature The temperature as a float.\n         * @return The temperature in 11073-20601 FLOAT-Type format.\n         */\n        uint32_t quick_ieee11073_from_float(float temperature) {\n            uint8_t  exponent = 0xFE; //Exponent is -2\n            uint32_t mantissa = (uint32_t)(temperature * 100);\n\n            return (((uint32_t)exponent) << 24) | mantissa;\n        }\n\n        /* First byte: 8-bit flags. Second field is a float holding the temperature value. */\n        /* See https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.temperature_measurement.xml */\n        uint8_t bytes[SIZEOF_VALUE_BYTES];\n    };\n\nprotected:\n    BLE                         &ble;\n    TemperatureValueBytes           valueBytes;\n    ReadOnlyGattCharacteristic<TemperatureValueBytes>  tempMeasurement;\n};","position":{"start":{"line":9,"column":1,"offset":830},"end":{"line":100,"column":4,"offset":4711},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Another note: the code right now displays the data in little-endian format, so using this link (","position":{"start":{"line":102,"column":1,"offset":4713},"end":{"line":102,"column":97,"offset":4809},"indent":[]}},{"type":"link","title":null,"url":"https://gregstoll.com/~gregstoll/floattohex/","children":[{"type":"text","value":"https://gregstoll.com/~gregstoll/floattohex/","position":{"start":{"line":102,"column":97,"offset":4809},"end":{"line":102,"column":141,"offset":4853},"indent":[]}}],"position":{"start":{"line":102,"column":97,"offset":4809},"end":{"line":102,"column":141,"offset":4853},"indent":[]}},{"type":"text","value":") to convert the hex value that is visible on the Lightblue app requires you to check \"Swap Endianess\".","position":{"start":{"line":102,"column":141,"offset":4853},"end":{"line":102,"column":244,"offset":4956},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":4713},"end":{"line":102,"column":244,"offset":4956},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next Steps: ","position":{"start":{"line":104,"column":1,"offset":4958},"end":{"line":104,"column":13,"offset":4970},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":4958},"end":{"line":104,"column":13,"offset":4970},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Convert to newer version of Mbed-OS","position":{"start":{"line":105,"column":3,"offset":4973},"end":{"line":105,"column":38,"offset":5008},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":4973},"end":{"line":105,"column":38,"offset":5008},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":4971},"end":{"line":105,"column":38,"offset":5008},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add more sensor services over BLE","position":{"start":{"line":106,"column":3,"offset":5011},"end":{"line":106,"column":36,"offset":5044},"indent":[]}}],"position":{"start":{"line":106,"column":3,"offset":5011},"end":{"line":106,"column":36,"offset":5044},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":5009},"end":{"line":106,"column":36,"offset":5044},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":4971},"end":{"line":106,"column":36,"offset":5044},"indent":[1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":106,"column":36,"offset":5044}}}}